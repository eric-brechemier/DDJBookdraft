== 4. Getting Data ==

=== A Five Minute Field Guide (Various Contributors) ===

Looking for data on a particular topic or issue? Not sure what exists or where to find it? Don't know where to start? In this section we look at how to get started with finding public data sources on the web.

*1. Streamlining Your Search.*

While they may not always be easy to find, many databases on the web indexed by search engines, whether the publisher intended this or not. Here are a few tips:

  * When searching for data, make sure that you include both search terms relating to the content of the data you're trying to find as well as some information on the format or source that you would expect it to be in. Google and other search engines allow you to search by file type. For example, you can look only for spreadsheets (by appending your search with `filetype:XLS filetype:CSV'), geodata (`filetype:shp'), or database extracts (`filetype:MDB, filetype:SQL, filetype:DB'). If you're so inclined, you can even look for PDFs (`filetype:pdf').
  * You can also search by part of a URL. Googling for `inurl:downloads filetype:xls' will try to find all Excel files that have ``downloads'' in their web address (if you find a single download, its often worth just checking what other results exist for the same folder on the web server). You can also limit your search to only those results on a single domain name, by searching for, e.g. `site:agency.gov'.
  * Another popular trick is not to search for content directly, but for places where bulk data may be available. For example, `site:agency.gov Directory Listing' may give you some listings generated by the web server with easy access to raw files, while `site:agency.gov Database Download' will look for intentionally created listings.

*2. Browse data sites and services*

Over the last few years a number of dedicated data portals, data hubs and other data sites have appeared on the web. These are a good place to get acquainted with the kinds of data that is out there. For starters you might like to take a look at:

  * Official data portals. The government's willingness to release a given dataset will vary from country to country. A growing number of countries are launching data portals (inspired by the US's data.gov and the UK's data.gov.uk) to promite the civic and commercial re-use of government information. An up-to-date, global index of such sites can be found at datacatalogs.org. Another handy site is the http://www.guardian.co.uk/world-government-data[Guardian World Government Data], a meta search engine that includes many international government data catalogues.
  * http://thedatahub.org/[The Data Hub]. A community-driven resource run by the Open Knowledge Foundation that makes it easy to find, share and reuse openly available sources of data, especially in ways that are machine automatable.
  * https://scraperwiki.com/[ScraperWiki]. an online tool to make the process of extracting "useful bits of data easier so they can be reused in other apps, or rummaged through by journalists and researchers." Most of the scrapers and their databases are public and can be re-used.
  * The http://data.worldbank.org/[World Bank] and http://data.un.org/[United Nations] data portals provide high-level indicators for all countries, often for many years in the past.
  * A number of startups are emerging, that aim to build communities around data sharing and re-sale. This includes http://buzzdata.com/[Buzzdata] - a place to share and collaborate on private and public datasets - and data shops such as http://www.infochimps.com/[Infochimps] and http://datamarket.com/[DataMarket].
  * http://datacouch.com/[DataCouch] - A place to upload, refine, share & visualize your data.
  *    An interesting Google subsidiary, http://www.freebase.com/[Freebase], provides "an entity graph of people, places and things, built by a community that loves open data."
  * Research data. There are numerous national and disciplinary aggregators of research data, such as the http://www.data-archive.ac.uk/[UK Data Archive]. While there will be lots of data that is free at the point of access, there will also be much data that requires a subscription, or which cannot be reused or redistributed without asking permission first.

*3. Ask a Forum.*

Search for existing answers or ask a question at http://getthedata.org/[Get The Data] or on http://www.quora.com/[Quora]. GetTheData is Q&A site where you can ask your data related questions, including where to find data relating to a particular issue, how to query or retrieve a particular data source, what tools to use to explore a data set in a visual way, how to cleanse data or get it into a format you can work with.

*4. Ask a Mailing List.*

Mailing lists combine the wisdom of a whole community on a particular topic. For data journalists, the  http://lists.okfn.org/mailman/listinfo/data-driven-journalism[Data Driven Journalism List] and the http://www.ire.org/membership/subscribe/nicar-l.html/[NICAR-L] lists are  excellent starting points. Both of these lists are filled with data journalists and Computer Assisted Reporting (CAR) geeks, who work on all kinds of projects. Chances are that someone may have done a story like yours, and may have an idea of where to start, if not a link to the data itself. You could also try http://project-wombat.org/[Project Wombat] (``a discussion list for difficult reference questions''), the http://wiki.okfn.org/Mailing_Lists[Open Knowledge Foundation's many mailing lists], mailing lists at http://theinfo.org/[theInfo], or searching for mailing lists on the topic, or in the region that you are interested in.

**5. Join Hacks/Hackers**

A rapidly expanding international grassroots journalism organization with dozens of chapters and thousands of members across four continents The mission is to create a network of journalists ("hacks") and technologists ("hackers") who rethink the future of news and information. With such a broad network - you stand a strong chance of someone knowing where to look for the thing you seek.

*6. Ask an Expert.*

Professors, public servants and industry folks often know where to look. Call them. Email them. Accost them at events. Show up at their office. Ask nicely. ``I'm doing a story on X. Where would I find this? Do you know who has this?''

**7. Learn About Government IT**

Understanding the technical and administrative context in which governments maintain their information is often helpful when trying to access data. Whether it's CORDIS, COINS or THOMAS - big-acronym databases often become most useful once you understand a bit about their intended purpose.

Find government organisational charts and look for departments/units with a cross-cutting function (e.g. reporting, IT services), then explore their web sites. A lot of data is kept in multiple departments and while for one, a particular database may be their crown jewels, another may give it to you freely.

Look out for dynamic infographics on government sites. These are often powered by structured data sources/APIs that can be used independently (e.g. flight tracking applets, weather forecast java apps).

**8. Search again using phrases and improbable sets of words you've spotted since last time**

When you know more about what you are looking for, you may have a bit more luck with search engines!

**9. Write an FOI Request**

If you believe that a government body has the data you need, a Freedom of Information request may be your best tool. See below for more information on how to file one.

=== Your Right to Data (Various Contributors) ===

Contributors: Helen Darbishire (Access Info), Fabrizio Scrollini (London School of Economics), Martin Rosenbaum (BBC)

image::Figures/04-AA.png[width=600]

Before you make a Freedom of Information (FOI) request you should check to see if the data you are looking for is already available - or has already been requested by others. The previous chapter has some suggestions for where you might look. If you've looked around and still can't get hold of the data you need, then you may wish to file a formal request. Here are some tips that may help to make your request more effective.

*1. Plan Ahead to Save Time.*

Think about submitting a formal access request whenever you set out to look for information. It's better not to wait until you have exhausted all other possibilities. You will save time by submitting a request at the beginning of your research and carrying out other investigations in parallel. Be prepared for delay: sometimes public bodies take a while to process requests, so it is better to expect this.

*2. Check the Rules About Fees*

Before you start submitting a request, check the rules about fees for either submitting requests or receiving information. That way, if a public official suddenly asks you for money, you will know what your rights are.

You can ask for electronic documents to avoid copying and posting costs, mention in your request that you would prefer the information in electronic format. That way you will avoid paying a fee, unless of course the information is not available electronically, although these days it's usually possible to scan documents which are not already digitalised and then to send them as an attachment by e-mail.

*3. Know Your Rights*

Find out what your rights are before you begin, so you know where you stand and what the public authorities are and are not obliged to do. For example, most freedom of information laws provide a time limit for authorities to reply to you. Globally, the range in most laws is from a few days to one month. You make sure that you know what this is before you set out, and make a note of when you submit your request.

Governments are not obliged to process data for you, but should give you all the data they have, and if it is data that they should have according to perform their legal competencies, they should certainly produce it for you.

*4. Say That You Know Your Rights*

Usually the law does not require that you mention the access to information law or freedom of information act, but this is recommended because it shows you know your legal rights and is likely to encourage correct processing of the requests according to the law. We note that for requests to the EU it's important to mention that it's an access to documents request and it's best to make a specific mention of Regulation 1049/2001.

*5. Keep it Simple*

In all countries, it is better to start with a simple request for information and then to add more questions once you get the initial information. That way you don't run the risk of the public institution applying an extension because it is a ``complex request''.

*6. Keep it Focused*

A request for information only held by one part of a public authority will probably be answered more quickly than one which requires a search across the entire authority. A request which involves the authority in consulting third parties (e.g., a private company which supplied the information, another government which is affected by it) can take particularly long. Be persistent.

*7. Think `Inside the Filing Cabinet'*

Try to find out what data is collated. For example, if you get a blank copy of the form the police fill out after traffic accidents, you can then see what information they do or do not record about car crashes.

*8. Be Specific*

Before you submit your request, think: is it in any way ambiguous? This is especially important if you are planning to compare data from different public authorities. For example, if you ask for figures for 'the past three years', some authorities will send you information for the past three calendar years and others for the past three financial years, which you won't be able to directly compare.

If you decide to hide the your real request in a more general one, then you should make your request broad enough so that it captures the information you want but not so broad as to be unclear or discourage a response. Specific and clear requests tend to get faster and better answers.

*9. Submit Multiple Requests*

If you are unsure where to submit your request, there is nothing to stop you submitting the request with two, three or more bodies at the same time. In some cases, the various bodies will give you different answers, but this can actually be helpful in giving you a fuller picture of the information available on the subject you are investigating.

*10. Submit International Requests*

Increasingly requests can be submitted electronically, so it doesn't matter where you live. Alternatively, if you do not live in the country where you want to submit the request, you can sometimes send the request to the embassy and they should transfer it to the competent public body. You will need to check with the relevant embassy first if they are ready to do this - sometimes the embassy staff will not have been trained in the right to information and if this seems to be the case, it's safer to submit the request directly to the relevant public body.

*11. Do a Test Run*

If you are planning to send the same request to many public authorities start by sending an initial draft of the request to a few authorities as a pilot exercise. This will show you whether you are using the right terminology to obtain the material you want and whether answering your questions is feasible, so that you can then revise the request if necessary before sending it to everyone.

*12. Anticipate the Exceptions*

If you think that exceptions might be applied to your request, then, when preparing your questions, separate the question about the potentially sensitive information from the other information that common sense would say should not fall under an exception. Then split your question in two and submit the two requests separately.

*13. Ask for Access to the Files*

If you live near where the information is held (e.g. in the capital where the documents are kept), you can also ask to inspect original documents. This can be helpful when researching information that might be held in a large number of documents that you'd like to have a look through. Such inspection should be free of charge and should be arranged at a time that is reasonable and convenient for you.

*14. Keep a Record!*

Make your request in writing and save a copy or a record of it so that in the future you are able to demonstrate that your request was sent, in case you need to make an appeal against failure to answer. This also gives you evidence of submitting the request if you are planning to do a story on it.

*15. Make it Public*

Speed up answers by making it public that you submitted a request: If you write or broadcast a story that the request has been submitted, it can put pressure on the public institution to process and respond to the request. You can update the information as and when you get a response to the request - or if the deadline passes and there is no response you can make this into a news story as well. Doing this has the additional benefit of educating members of the public about the right of access to information and how it works in practice.

There are also several excellent services which you can use to make your request, and any subsequent responses, publicly viewable on the web - such as http://www.whatdotheyknow.com/[What Do They Know?] for UK public bodies, https://fragdenstaat.de/[Frag den Staat] for German public bodies, and http://www.asktheeu.org/[Ask the EU] for EU institutions. The http://www.alaveteli.org/[Alaveteli] project is helping to bring similar services to dozens of countries around the world.

*16. Involve Colleagues*

If your colleagues are sceptical about the value of access to information requests, one of the best ways to convince them is to write a story based on information you obtained using an access to information law. Mentioning in the final article or broadcast piece that you used the law is also recommended as a way of enforcing its value and raising public awareness of the right.

*17. Ask for Raw Data*

If you want to analyse, explore or manipulate data using a computer then you should explicitly ask for data in an electronic, machine-readable format. You may wish to clarify this by specifying, for example, that you require budgetary information in a format ``suitable for analysis with accounting software''. You may also wish to explicitly ask for information in `disaggregated' or `granular' form. You can read more about this point in http://www.access-info.org/documents/Access_Docs/Advancing/Beyond_Access_7_January_2011_web.pdf[this report].

=== Wobbing Works. Use it! (Brigitte Alfter, Freelance Journalist) ===

Using freedom of information legislation - or wobbing, as it is sometimes called - is an excellent tool. But it requires method and, often, persistence. Here are three examples illustrating the strengths and challenges of wobbing from my work as an investigative journalist.

image::Figures/04-BB.png[width=600]

*Case Study 1: Farm Subsidy*

Every year EU pays almost €60 billion to farmers and the farming industry. Every year. This has been going on since late 1950s and the political narrative was that the subsidies help our poorest farmers. However a first FOI breakthrough in Denmark in 2004 indicated that this was just a narrative. The small farmers were struggling as they so often complained about in private and in public, and in reality most of the money went to a few large land owners and to the agricultural industry. So obviously I wanted to know: is there a pattern across Europe?

In the summer of 2004 I asked the European Commission for the data. Every year in February the Commission receives data from the member states. The data shows who applies for EU funding, how much beneficiaries get, and whether they get it for farming their land, developing their region or for exporting milk powder. At that time, the Commission received the figures as CSV files on a CD. A lot of data, but in principle easy to work with. If you could get it out, that is.

In 2004 the Commission refused to release the data - the key argument being that the data was uploaded into a database and couldn't be retrieved without a lot of work. An argument, that the European Ombudsmand called ``maladministration''. You can find all documents in this case http://www.wobbing.eu/news/eu-watchdog-criticises-commission-and-comments-access-databases[on the wobbing.eu website]. Back in 2004 we did not have the time to be legal foodies. We wanted the data.

So we teamed up with partners throughout Europe to get the data country by country. English, Swedish and Dutch colleagues got the data in 2005. Finland, Poland, Portugal, regions of Spain, Slovenia and other countries opened up in the too. Even in wob-difficult Germany I got a breakthrough and received some data in the province of North Rhine-Westfalia in 2007. I had to go to court to get the data - but it resulted in some nice articles in the http://www.stern.de/wirtschaft/news/unternehmen/agrarsubventionen-volle-toepfe-fuer-die-grossen-601794.html[Stern and Stern online] news magazine.

Was it a coincidence that Denmark and the UK were the first to open up their data? Not necessarily. Looking at the bigger political picture, the farm subsidies at the time had to be seen in the context of the WTO negotiations where subsidies were under pressure. Denmark and the UK are amongst the more liberal countries in Europe, so there may well have been political winds blowing into the direction of transparency in those countries.

The story did not stop there, for more episodes and for the data see http://farmsubsidy.org/[farmsubsidy.org].

Lesson: Go wob-shopping. We have a fabulous diversity of freedom of information laws in Europe, and different countries have different political interests at different times. This can be used to your advantage. 

*Case Study 2: Side Effects*

We are all guinea pigs when it comes to taking medicine. Drugs can have side-effects. We all know this, we balance potential benefits with potential risks, and we make a decision. Unfortunately often this decision is not an informed decision.

When teenagers take a pill against pimples they hope for smooth skin, not for a bad mood. Yet exactly this happened with one drug, where the youngsters turned depressive and even suicidal after taking it. The danger of this particular side effect - an obvious story for journalists - was not easily available.

There is data about side-effects. The producers regularly have to deliver information to the health authorities about observed side-effects. They are held by national or European authorities once a drug is allowed on the market.

The initial breakthrough again came at national level in Denmark. During a cross-border research by a Danish-Dutch-Belgian team, the Netherlands opened up too. Another example of wob-shopping: it greatly helped our case to point out to the Dutch authorities that the data was accessible in Denmark.

But the story was true: in Europe there were suicidal young people and sadly also suicides in several countries as a result of the drug. Journalists, researchers, and the family of a young victim were all pushing hard to get access to this information. The European Ombudsman helped to push for the transparency at the European Medicines Agency - and it http://www.ombudsman.europa.eu/press/release.faces/en/5498/html.bookmark[looks, as if he succeeded]. So now the task is upon journalists to get out data and analyse the material thoroughly. Are we all guinea pigs, as one researcher put it, or are the control mechanisms sound?

Lessons: Don't take no for an answer when it's about transparency. Be persistent and follow a story over time. Things may well change and allow better reporting based upon better access at a later point.

*Case Study 3: Smuggling Death*

Recent history can be utterly painful for entire populations, particularly after wars and in times of transition. So how can journalists obtain hard data to investigate, when - for example - last decade's war profiteers are now in power? This was the task that a team of Slovenian, Croatian and Bosnian journalists set out to pursue.

Slovenian parliamentary commissions have held inquiries into the question of profiteering from the Balkan wars, but have never reached a conclusion. Yet there was an extremely valuable trail of declassified documents and data, including 6000 pages which the Slovene team obtained through a freedom of information request.

In this case the data had to be extracted from the documents and sorted in databases. For example, transports had to be traced by vessel number in ports and license plates of trucks. By augmenting the data with further data, analysis and research, they were able to map numerous of the routes of the http://www.kaasogmulvad.dk/unv/kiev/Arms%20smuggling%20-%20TRILOGY%20In%20the%20Name%20of%20the%20State%20-%20Matej%20Surc,%20Blaz%20Zgaga%20-%20Slovenia.pdf[illegal weapon trade].

The team succeeded and the results are http://www.journalismfund.eu/index.php?page=10&detail=154&be785f3421ff8f5ed50dfda00382b66049da3f53=a499c267af42d8392057f24e3fa5b9ca[unique] and have already http://www.journalismfund.eu/index.php?page=9&detail=155[won the team their first award]. Most importantly the story matters for the entire region and may well be picked up by journalists in other countries through which the deadly cargo has passed.

Lessons: Get out good raw material even if you find it in unexpected places and combine it with existing publicly accessible data.

=== Getting Data from the Web (Friedrich Lindenberg, Open Knowledge Foundation) ===

You've tried everything else, and you haven't managed to get your hands on the data you want. You've found the data on the web, but, alas - no download options are available and copy-paste has failed you. Fear not, there may still be a way to get the data out. For example you can:

  * Get data from web-based APIs, such as interfaces provided by online databases and many modern web applications (including Twitter, Facebook and many others). This is a fantastic way to access government or commercial data, as well as data from social media sites.
  * Extract data from PDFs. This is very difficult, as PDF is a language for printers and does not retain much information on the structure of the data that is displayed within a document. Extracting information from PDFs is beyond the scope of this book, but there are some tools and tutorials that may help you do it.
  * Screen scrape web sites. During screen scraping, you're extracting structured content from a normal web page with the help of a scraping utility or by writing a small piece of code. While this method is very powerful and can be used in many places, it requires a bit of understanding about how the web works.

With all those great technical options, don't forget the simple options: often it is worth to spend some time searching for a file with machine-readable data or to call the institution which is holding the data you want.

In this chapter we walk through a very basic example of scraping data from an HTML web page.

*What is machine-readable data?*

The goal for most of these methods is to get access to machine-readable data. Machine readable data is created for processing by a computer, instead of the presentation to a human user. The structure of such data relates to contained information, and not the way it is displayed eventually. Examples of easily machine-readable formats include CSV, XML, JSON and Excel files, while formats like Word documents, HTML pages and PDF files are more concerned with the visual layout of the information. PDF for example is a language which talks directly to your printer, it's concerned with position of lines and dots on a page, rather than distinguishable characters.

*Scraping web sites: what for?*

Everyone has done this: you go to a web site, see an interesting table and try to copy it over to Excel so you can add some numbers up or store it for later. Yet this often does not really work, or the information you want is spread across a large number of web sites. Copying by hand can quickly become very tedious, so it makes sense to use a bit of code to do it.

The advantage of scraping is that you can do it with virtually any web site - from weather forecasts to government spending, even if that site does not have an API for raw data access.

*What you can and cannot scrape*

There are, of course, limits to what can be scraped. Some factors that make it harder to scrape a site include:

  * Badly formatted HTML code with little or no structural information e.g. older government websites.
  * Authentication systems that are supposed to prevent automatic access e.g. CAPTCHA codes and paywalls.
  * Session-based systems that use browser cookies to keep track of what the user has been doing.
  * A lack of complete item listings and possibilities for wildcard search.
  * Blocking of bulk access by the server administrators.

Another set of limitations are legal barriers: some countries recognize database rights, which may limit your right to re-use information that has been published online. Sometimes, you can choose to ignore the license and do it anyway - depending on your jurisdiction, you may have special rights as a journalist. Scraping freely available Government data should be fine, but you may wish to double check before you publish. Commercial organizations - and certain NGOs - react with less tolerance and may try to claim that you're ``sabotaging'' their systems. Other information may infringe the privacy of individuals and thereby violate data privacy laws or professional ethics.

*Tools that help you scrape*

There are many programs that can be used to extract bulk information from a web site, including browser extensions and some web services. Depending on your browser, tools like http://www.readability.com/[Readability] (which helps extract text from a page) or http://www.downthemall.net/[DownThemAll] (which allows you to download many files at once) will help you automate some tedious tasks, while Chrome's https://chrome.google.com/webstore/detail/mbigbapnjcgaffohmbkdlecaccepngjd[Scraper extension] was explicitly built to extract tables from web sites. Developer extensions like http://getfirebug.com/[FireBug] (for Firefox, the same thing is already included in Chrome, Safari and IE) let you track exactly how a web site is structured and what communications happen between your browser and the server.

https://scraperwiki.com/[ScraperWiki] is a web site that allows you to code scrapers in a number of different programming languages, including Python, Ruby and PHP. If you want to get started with scraping without the hassle of setting up a programming environment on your computer, this is the way to go. Other web services, such as Google Spreadsheets and Yahoo! Pipes also allow you to perform some extraction from other web sites.

*How does a web scraper work?*

Web scrapers are usually small pieces of code written in a programming language such as Python, Ruby or PHP. Choosing the right language is largely a question of which community you have access to: if there is someone in your newsroom or city already working with one of these languages, then it makes sense to adopt the same language.

While some of the click-and-point scraping tools mentioned before may be helpful to get started, the real complexity involved in scraping a web site is in addressing the right pages and the right elements within these pages to extract the desired information. These tasks aren't about programming, but understanding the structure of the web site and database.

When displaying a web site, your browser will almost always make use of two technologies: HTTP is a way for it to communicate with the server and to request specific resource, such as documents, images or videos. HTML is the language in which web sites are composed.

*The anatomy of a web page*

Any HTML page is structured as a hierarchy of boxes (which are defined by HTML ``tags''). A large box will contain many smaller ones - for example a table that has many smaller divisions: rows and cells. There are many types of tags that perform different functions - some produce boxes, others tables, images or links. Tags can also have additional properties (e.g. they can be unique identifiers) and can belong to groups called `classes', which makes it possible to target and capture individual elements within a document. Selecting the appropriate elements this way and extracting their content is the key to writing a scraper.

Viewing the elements in a web page: everything can be broken up into boxes within boxes.

To scrape web pages, you'll need to learn a bit about the different types of elements that can be in an HTML document - for example, the +<table>+ element wraps a whole table, which has +<tr>+ (table row) elements for its rows, which in turn contain +<td>+ (table data) for each cell. The most common element type you will encounter is +<div>+, which can basically mean anything. The easiest way to get a feel for these elements is by using the http://skypoetsworld.blogspot.com/2008/01/browser-debugging-tools.html[developer toolbar] in your browser: they will allow you to hover over any part of a web page and see what the underlying code is.

Tags work like book ends, marking the start and the end of a unit. For example +<em>+ _signifies the start of an italicised or `emphasised' piece of text and_ +</em>+ signifies the end of that section. Easy.

*An Example: Nuclear incidents*

image::Figures/04-CC.png[width=600]

http://www-news.iaea.org/EventList.aspx[NEWS] is the International Atomic Energy Agency's (IAEA) portal on world-wide radiation incidents (and a strong contender for membership in the Weird Title Club!). The web page lists incidents in a simple, blog-like site that can be easily scraped. 

To start, create a new Python scraper on https://scraperwiki.com/[ScraperWiki] and you will be presented with a text area that is mostly empty, except for some scaffolding code. In another browser window, open the http://www-news.iaea.org/EventList.aspx[IAEA site] and open the developer toolbar in your browser. In the ``Elements'' view, try to find the HTML element for one of the news item titles. Your browser's developer toolbar helps you connect elements on the web page with the underlying HTML code.

Investigating this page will reveal that the titles are +<h4>+ elements within a +<table>+. Each event is a +<tr>+ row, which also contains a description and a date. If we want to extract the titles of all events, we should find a way to select each row in the table sequentially, while fetching all the text within the title elements.

In order to turn this process into code, we need to make ourselves aware of all the steps involved. To get a feeling for the kind of steps required, let's play a simple game: In your ScraperWiki window, try to write up individual instructions for yourself, for each thing you are going to do while writing this scraper, like steps in a recipe (prefix each line with a hash sign to tell Python that this not real computer code). For example:

----
# Look for all rows in the table
# Unicorn must not overflow on left side.  
----

Try to be as precise as you can and don't assume that the program knows anything about the page you're attempting to scrape.

Once you've written down some pseudo-code, let's compare this to the essential code for our first scraper:

----
1. import scraperwiki
2. from lxml import html
----

In this first section, we're importing existing functionality from libraries - snippets of pre-written code. +scraperwiki+ will give us the ability to download web sites, while +lxml+ is a tool for the structured analysis of HTML documents. Good news: if you are writing a Python scraper with ScraperWiki, these two lines will always be the same.

----
3. url = "http://www-news.iaea.org/EventList.aspx"
4. doc_text = scraperwiki.scrape(url)
5. doc = html.fromstring(doc_text)
----

Next, (Line 3) we're making a name (variable): +url+ - and assign the URL of the IAEA page as its value. This tells the scraper that this thing exists and we want to pay attention to it. Note that the URL itself is in quotes as it is not part of the program code but a string - a sequence of characters.

Line 4. We then use the +url+ variable as input to a function, +scraperwiki.scrape+. A function will provide some defined job - in this case it'll download a web page. When it's finished, it'll assign its output to another variable, +doc_text+. +doc_text+ will now hold the actual text of the website - not the visual form you see in your browser, but the source code, including all the tags. Since this form is not very easy to parse, we'll use another function, +html.fromstring+, to generate a special representation where we can easily address elements - the so-called document object model (DOM).

----
6. for row in doc.cssselect("#tblEvents tr"):
7.	link_in_header = row.cssselect("h4 a").pop()
8.	event_title = link_in_header.text
9. 	print event_title
----

Lines 6-9. In this final step, we use the DOM to find each row in our table and extract the event's title from its header. Two new concepts are used: the for loop and element selection (+.cssselect+). The for loop essentially does what its name implies - it will traverse a list of items, assigning each a temporary alias (+row+ in this case) and then run any indented instructions for each item.

The other new concept, element selection, is making use of a special language to find elements in the document. CSS selectors are normally used to add layout information to HTML elements and can be used to precisely pick an element out of a page. In this case (Line. 6) we're selecting +#tblEvents tr+ which will match each +<tr>+ within the table element with the ID +tblEvents+ (the hash simply signifies ID). Note that this will return a list of +<tr>+ elements.

As can be seen on the next line (Line. 7), where we're applying another selector to find any +<a>+ (which is a hyperlink) within a +<h4>+ (a title). Here we only want to look at a single element (there's just one title per row), so we have to +pop+ it off the top of the list returned by our selector with the +.pop()+ function.

Note that some elements in the DOM contain actual text, i.e. text that is not part of any markup language, which we can access using the +[element].text+ syntax seen on line 8. Finally, in line 9, we're printing that text to the ScraperWiki console. If you hit run in your scraper, the smaller window should now start listing the event's names from the IAEA web site.

image::Figures/04-DD.png[width=600]

You can now see a basic scraper operating: it downloads the web page, transforms it into the DOM form and then allows you to pick and extract certain content. Given this skeleton, you can try and solve some of the remaining problems using the ScraperWiki and Python documentation:

  * Can you find the address for the link in each event's title?
  * Can you select the small box that contains the date and place by using its CSS class name and extract the element's text?
  * ScraperWiki offers a small database to each scraper so you can store the results - copy the relevant example from their docs and adapt it so it will save the event titles, links and dates.
  * The event list has many pages - can you scrape multiple pages to get historic events as well?

As you're trying to solve these challenges, have a look around ScraperWiki: there are many useful examples in the existing scrapers - and quite often, the data is pretty exciting, too. This way, you don't need to start off your scraper from scratch: just choose one that is similar, fork it and adapt to your problem.

=== Crowdsourcing Data at the Guardian Datablog (Marianne Bouchart, Data Journalism Blog) ===

Crowdsourcing, http://en.wikipedia.org/wiki/Crowdsourcing[according to Wikipedia], is "a distributed problem-solving and production process that involves outsourcing tasks to a network of people, also known as the crowd". For this chapter Marianne Bouchart (Data Journalism Blog) interviewed Simon Rogers and James Ball from the Guardian Datablog about how they use crowdsourcing tools and methods to generate or add value to datasets.

*How the Datablog used crowdsourcing to cover the MPs expenses scandal, drug use, and the Sarah Palin papers - Simon Rogers*

____
Sometimes you will get a ton of files, statistics, or reports which it is impossible for one person to go through. Also you may get hold of material that is inaccessible or in a bad format and you aren't able to do much with it. This is where crowdsourcing can help.

One thing the Guardian has got is lots of readers, lots of pairs of eyes. If there is an interesting project where we need input, then we can ask them to help us. That is what we did with the http://mps-expenses.guardian.co.uk/[MPs Expenses]. We had 450,000 documents and very little time to do anything. So what better way than open up the task to our readership?

The MPs Expenses project generated lots of tip-offs. We got more stories than data. The project was remarkably successful in terms of traffic. People really liked it.

We are currently doing something with MixMag on drug use, which has been phenomenal as well. It looks like it is going to be bigger than the British crime survey in terms of how many people come back to it, which is brilliant. 

What both of these projects have in common is that they are about issues that people really care about, so they are willing to spend time on them. A lot of the crowdsourcing we have done relies on help from obsessives. With the MPs expenses we had a massive amount of traffic at the beginning and it really died down. But what we still have people that are obsessively going through every page looking for anomalies and stories. One person has done 30,000 pages. They know a lot of stuff.

We also used crowdsourcing with the Sarah Palin papers. Again this was a great help in scouring the raw information for stories. 

In terms of generating stories crowdsourcing has worked really well for us. People really liked it and it made the Guardian `look good'. But in terms of generating data, we haven't used crowdsourcing so much.

Some of the crowdsourcing projects that we've done that have worked really well have been more like old fashioned surveys. When you are asking people about their experience, about their lives, about what they've done, they work very well because people aren't as likely to make that up. They will say what they feel. When we asked people to kind of do our job for us, you have to find a framework for people to produce the data in a way you can trust them.

Regarding the reliability of data, I think the approach that http://www.oldweather.org/[Old Weather] have got is really good. They get ten people to do each entry, which is a good way to ensure accuracy. With the MPs expenses, we tried to minimise the risk of MPs going online and editing their own records to make themselves look better. But you can't permanently guard against this. You can only really look out for certain URLs or if it's coming from the SW1 area of London. So that's a bit trickier. The data we were getting out was not always reliable. Even though stories were great, it wasn't producing raw numbers that we could confidently use.

If I were to give advice to aspiring data journalists who want to use crowdsourcing to collecting data, I would encourage them do this on something that people really care about, and will continue to care about when it stops making front page headlines. Also if you make something more like a game this can really help to engage people. When we did the expenses story a second time it was much more like a game with individual tasks for people to do. It really helped to give people specific tasks. That made a big difference because I think if you just present people with the mountain of information to go through and say `go through this' it can make for hard and rather unrewarding work. So I think making it fun is really important.
____

*How the Datablog used crowdsourcing to cover Olympic ticketing - James Ball*

____

I think the crowdsourcing project that got the biggest response was the one that we did on Olympic ticketing. Thousands of people in the UK tried to get tickets for the 2012 Olympics and there was a lot of fury that people hadn't got them. People had ordered hundreds of pounds worth and were told that they'd get nothing. But no one really knew if it was just some people complaining quite loudly while actually most people were happy. So we tried to work out a way to find out.

We decided the best thing we could really do, with the absence of any good data on the topic, was to ask people. And we thought we'd have to treat it as a light thing because it wasn't a balanced sample. 

We created a Google form and asked very specific questions. It was actually a long form, it asked how much in value people had ordered their tickets, how much their card had been debited for, which events they went for, this kind of thing. 

We put it up as a small picture on the front of the site but it was shared around really rapidly. I think this is one of the key things, you can't just think `what do I want to know for my story', you have to think `what do people want to tell me right now'. And it's only when you tap into what people want to talk about that crowdsourcing is going to be successful.

The volume of responses for this project, which is one of our first attempts at crowdsourcing, was huge. We had a thousand responses in less than an hour and seven thousands by the end of that day. 

So obviously we took presenting the results a bit more seriously at this point. Initially we had no idea how well it would do. So we added some caveats: Guardian readers may be more wealthy than other people, people who got less than they expected might be more willing to talk to us, and so on.

We didn't know how much value the results would have. We ended up having a good seven thousand records to base our piece on, and we found about half the people who'd asked for tickets had got nothing. We ran all of this stuff and because so many people had taken part the day before, there was a lot of interest in the results. 

A few weeks later, the official summary report came out, and our numbers were shockingly close. They were almost exactly spot on. I think partly through luck but also because we got just so many people.

Generally though, I tend to find that crowdsourcing is more useful for the content around the data story or for getting people to follow one up. I do quite a lot of work on lobbying and I try and publish the data that we work with internally because sometimes you will get someone who will turn up and say: `Ah, that research doesn't declare anything but I know that they work for here'. It's all about learning how to follow up these kinds of comments. In our experience crowdsourcing is generally less help in compiling data, and more valuable in helping to provide context around it. There is only so much that you can do with the data yourself, and you can only know so many people.

With the Olympics project we preempted that we wanted to do analysis on it, which was a big help. If you start something like this as a comments thread, you will be limited in what you can do with the results. So you have to start by thinking: `What is the best tool for what I want to know?' Is it a comment thread? Or is it building an app? And if it is building an app, you have to think `Is this worth the wait? And is it worth the resources that are required to do it?' 

In this case we thought of Google Forms. If someone fills in the form you can see the result as a row on a spreadsheet. This meant that even if it was still updating, even if results were still coming in, I could open up the spreadsheet and see all of the results straight away. 

I could have tried to do the work in Google but I downloaded it into Microsoft Excel and then did things like sort it from low to high and found the people who decided to write in instead of putting digits on how much they spent and fixed all of those. I decided not to exclude as little as I could. So rather than taking only valid responses, I tried to fix other ones. People had used foreign currencies so I converted them to sterling, all of which was a bit painstaking.

But the whole analysis was done in a few hours, and I knocked out the obviously silly entries. A lot of people decided to fill it out pointing out they spent nothing on tickets. That's a bit facetious but fine. That was less than a hundred out of over seven thousands entries.

Then there were a few dozen who put in obviously fake high amounts to try to distort the results. Things like ten million pounds. So that left me with a set that I could use with the normal data principles we use every day. I did what's called a `pivot table'. I did some averaging. That kind of thing. 

So because we planned it ahead, it meant it was quite simple. If we had to stumble into it through a comment thread, it would have been much harder. This shows the value of thinking about what you might do with the results of crowdsourcing in advance.

From the Datablog it was just me working on this project. We hadn't really any idea it would get the momentum it did so I worked with the Sports blog editor. We put our heads together and thought this might be a fun project. We did it, start to finish, in 24 hours. We had the idea, we put something up at lunch time, we put it on the front of the site, we saw it was proving quite popular, we kept it on the front of the site for the rest of the day and we presented the results online the next morning.

We decided to use Google Docs because it gives complete control over the results. I didn't have to use anyone else's analytic tools. I can put it easily into a database software or into spreadsheets. When you start using specialist polling software, you are often restricted to using their tools. If the information we'd been asking for was particularly sensitive, we might have hesitated before using Google and thought about doing something `in house'. But generally, it is very easy to drop a Google Form into a Guardian page and it's virtually invisible to the user that we are using one. So it is very convenient.

In terms of advice for data journalists who want to use crowdsourcing: you have to have very specific things you want to know. Ask things that get multiple choice responses as much as possible. Try to get some basic demographics of who you are talking to so you can see if your sample might be biased. If you are asking for amounts and things like this, try in the guidance to specify that it's in digits, that they have to use a specific currency and things like that. A lot won't, but the more you hold their hand through, the better. And always, always add a comment box because a lot of people will fill out the other things but what they really want is to give you their opinion on the story. Especially on a consumer story or an outrage.
____

=== Reusing, Republishing, Rights (Various Contributors) ===

////

Insert traffic lights picture - mixed signals?

////

(Source: http://opendatahandbook.org/[The Open Data Manual], with input from Helen Darbishire, Access Info)

Most of the new Open Data portals being set up by governments now make clear that the data that is released can be used free of charge, same goes for information obtained through Freedom of Information Requests. If you have scraped the data from a database such as a public body's website, then you may be particularly liable for limitations on reuse. Sometimes there will be intellectual property limitations, but normally the only requirement is that you cite the source of the information.

When talking about databases and intellectual property we need to distinguish between the structure and the content of a database (when we use the term 'data' we shall mean the content of the database itself). Structural elements include things like the field names and a model for the data -- the organization of these fields and their inter-relation.

In many jurisdictions it is likely that the structural elements of a database will be covered by copyright (it depends somewhat on the level of 'creativity' involved in creating this structure).
 
The distinction between the "contents" of a database and the collection is especially crucial for factual databases since no jurisdiction grants a monopoly right in the individual facts (the "contents") even though it may grant right(s) in them as a collection.

To illustrate, consider the simple example of a database which lists the melting point of various substances. While the database as a whole might be protected by law so that one is not allow to access, reuse or redistribute it without permission this would never prevent you from stating the fact that substance Y melts at temperature Z.
 
You can read more about the situation your jurisdiction in the http://opendefinition.org/guide/data/[Guide to Open Data Licensing].

If you find you are having problems with your right to reuse information, then please let the campaign group Access Info Europe know (helpdesk@access-info.org). Access Info will help you with legal advice and will try to find lawyers in your country should that be necessary.
Success? What now...? Share the data...


When you publish your project, do the rest of us a favor and include the data you've collected! It would be a damned shame if all that beautiful data you dug up (cleaned up, formatted and augmented) went stale on your hard drive. Let others source-check your story and perhaps even find different stories in the data.

When you do publish data, include an explicit IP statement, in particular an open license like the Creative Commons Zero or Attribution terms or the Open Database License (ODbL). If the data is government information not covered by copyright, publish it using Creative Commons' PD Mark dedication to make it clear that the data will be available in the public domain forever and for others to reuse!

NOTE FOR JWYG: Much of the information in this chapter formerly related to submitting an FOI request, differences in legislation in different countries... It's interesting but not specific to data journalism. The overflow material is in this doc: FOI tipsheet (also linked from overflow materials) Thought perhaps we could turn the other sections into an FOI tipsheet and publish it on DDJnet and link to it

=== Anecdotes and War Stories (Various Contributors) ===

